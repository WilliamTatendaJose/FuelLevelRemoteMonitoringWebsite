@page "/pumps--data"
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Charts
@attribute [Authorize]

<PageTitle>Motor Parameters</PageTitle>
<RadzenText Text="Real time Pump Parameters" TextStyle="Radzen.Blazor.TextStyle.H4" TagName="Radzen.Blazor.TagName.H4" class="mt-6" TextAlign="Radzen.TextAlign.Left"></RadzenText>
<br />

<div style="width:100%; height:20%;">

<SfChart Title="Pump Voltage" >
    <ChartPrimaryXAxis LabelPlacement="LabelPlacement.OnTicks" LabelIntersectAction="LabelIntersectAction.Rotate45" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
   
	
	<ChartPrimaryYAxis Title="Voltage/V" >
	</ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@messages" XName="Timestamp" YName="Voltage" Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>
<div style="width:100%; height:20%;">
<SfChart Title="Pump Current">
    <ChartPrimaryXAxis LabelPlacement="LabelPlacement.OnTicks" LabelIntersectAction="LabelIntersectAction.Rotate45" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Current/A">
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@messages" XName="Timestamp" YName="Current" Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>
<div style="width:100%; height:20%;">
<SfChart Title="Pump Vibrations" >
    <ChartPrimaryXAxis LabelPlacement="LabelPlacement.OnTicks" LabelIntersectAction="LabelIntersectAction.Rotate45"  ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Vibrations/Hz">
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@messages" XName="Timestamp" YName="Vibration" Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>
<div style="width:100%; height:20%;">
<SfChart Title="Pump Flow Rate" >
    <ChartPrimaryXAxis LabelPlacement="LabelPlacement.OnTicks" LabelIntersectAction="LabelIntersectAction.Rotate45" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Flow Rate /L/Min">
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@messages" XName="Timestamp" YName="FlowRate" Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>
<div style="width:100%; height:20%;">
<SfChart Title="Pump Temperature">
    <ChartPrimaryXAxis LabelPlacement="LabelPlacement.OnTicks" LabelIntersectAction="LabelIntersectAction.Rotate45" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Temperature /degree C">
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@messages" XName="Timestamp" YName="Temperature" Type="ChartSeriesType.Line">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>









@code {
    private HubConnection hubConnection; //for connecting to SignalR
    private List<TelemetryPayload> messages = new(); //List of messages to display

    private readonly HttpClient _httpClient = new HttpClient(); //HttpClient for posting messages

    private readonly string functionAppBaseUri = "http://localhost:7073/api/"; //URL for function app. Leave this as is for now.

    protected override async Task OnInitializedAsync() //actions to do when the page is initialized
    {
        //create a hub connection to the function app as we'll go via the function for everything SignalR.
        hubConnection = new HubConnectionBuilder()
            .WithUrl(functionAppBaseUri)
            .Build();

        //Registers handler that will be invoked when the hub method with the specified method name is invoked.
        hubConnection.On<TelemetryPayload>("telemetryPayload", (telemetryPayload) =>
        {
            //telemetryPayload.Timestamp = DateTime.Now;
            messages.Add(telemetryPayload);
            StateHasChanged(); //This tells Blazor that the UI needs to be updated
        });

        await hubConnection.StartAsync(); //start connection!
    }



    //Check we're connected
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;



    public class TelemetryPayload
    {


        public double Voltage { get; set; }
        public double Temperature { get; set; }
        public double Current { get; set; }
        public double FlowRate { get; set; }
        public double Vibration { get; set; }
        public double UndergroundTank1FuelLevel { get; set; }

        public double UndergroundTank2FuelLevel { get; set; }

        public double BurnerFuelLevel { get; set; }
        public double BoilerFuelLevel { get; set; }
        public double GeneratorFuelLevel { get; set; }

        public DateTime Timestamp { get; set; }

    }

}