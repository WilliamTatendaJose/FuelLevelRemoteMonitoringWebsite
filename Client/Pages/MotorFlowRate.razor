<RadzenText Text="Motor FlowRate over time" TextStyle="Radzen.Blazor.TextStyle.H5" TagName="Radzen.Blazor.TagName.H4" class="mt-6" TextAlign="Radzen.TextAlign.Left"></RadzenText>

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Data="@flowRateData" CategoryProperty="Time" Title="Motor FlowRate" LineType="LineType.Solid" ValueProperty="FlowRate">
                    <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" Formatter="@FormatAsSeconds" />
                <RadzenValueAxis Formatter="@FormatAsFlowRate">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="FlowRate (Unit)" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>

@code {
    bool smooth = true;
    bool showDataLabels = false;
    bool showMarkers = false;
    int dataPoints = 100; // Number of data points to generate

    [Parameter]
    public double FlowRateValue{ get; set; }

    class FlowRateData
    {
        public DateTime Time { get; set; } // Replace with actual time unit based on data source
        public double FlowRate { get; set; }
    }
    private List<FlowRateData> flowRateData = new List<FlowRateData>();

    void AddFlowRateData(double FlowRateValue)
    {
        flowRateData.Add(new FlowRateData
            {
                FlowRate = FlowRateValue,
                Time = DateTime.Now
            });
    }
    string FormatAsSeconds(object value)
    {
        return ((double)value).ToString("0.00 s"); // Adjust format as needed
    }

    string FormatAsFlowRate(object value)
    {
        return ((double)value).ToString("0.00 L/Min"); // Example format (replace l/min with your unit)
    }



    protected override void OnInitialized()
    {
        AddFlowRateData(FlowRateValue);
    }

    
}
